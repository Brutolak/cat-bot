// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π
// –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è -- —Ä–æ—Å—Å–∏–π—Å–∫–∞—è
// –í –ø–ª–∞–Ω–∞—Ö: –∞–Ω–≥–ª–∏–π—Å–∫–∞—è
const { ru } = require("../content/localization/ru");
const { GetTop } = require("../service/userService");

async function Text(key, user) {
  //console.log(key)
  let text = ru[key];
  if (typeof text === "string") return await Fill(text, user);
  if (Array.isArray(text)) return await Fill(Random(text), user);
  if (typeof text == "object") return text;
  return key;
}

function Random(text_array) {
  let n = Math.floor(Math.random() * text_array.length);
  return text_array[n];
}

// –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
// –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Ä–æ–≤–µ–Ω—å, —ç–Ω–µ—Ä–≥–∏—è –∏ —Ç.–¥)
async function Fill(text, user) {
  // –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ö

  if (text.match(/\{(\w*)\}/)) {
    // —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö - {text}. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –≥—É–≥–ª–µ: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è

    // –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å
    let s = "" + text;

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º, –ø–æ–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    while (s.match(/\{(\w*)\}/)) {
      let a = s.match(/\{(\w*)\}/);
      let e = await GetVar(a[1], user);
      s = s.replace(a[0], e);
    }

    // –í–æ–∑–≤—Ä–∞—â–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    return s;
  }

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
  return text;
}

async function GetVar(key, user) {
  //console.log(user)

  switch (key) {
    case "user_name":
      return user.name;

    case "user_level":
      return user.level;

    case "user_exp":
      return user.exp;

    case "user_exp_max":
      return user.exp_max;

    case "user_fish":
      return user.inv[0].amt;

    case "user_energy":
      return `(${user.energy.cur}/${user.energy.max})`;

    case "reward_items":
      return await RewardText(user);

    case "event_timer":
      return await Timer();

    case "top":
      return await TopText(user);

    default:
      return await Text(key, user);
  }
}

async function RewardText(user) {
  let { reward, exp } = user.event;
  let rewardText = "";
  for (let key in reward) {
    let item = await Text(key);
    rewardText += `\n${item.icon}${item.name} x${reward[key]}`;
  }
  rewardText += `\n${await Text("exp", user)} x${exp}`;

  return rewardText;
}

async function TopText(user) {
  let N = 10; //–¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤

  let top = await GetTop(); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤

  let text = ""; //
  let inList = false; //

  //
  for (let i in top) {
    let { id, level, name } = top[i]; //

    if (i == "0") name = `üëë¬†${name} üëë`; //
    if (id == user.id) {
      inList = +i;
      name += YouSign(id);
    }
    if (i < N) text += `\n${+i + 1}. [${level}] ${name}`;
  }

  if (inList >= N) {
    text += `\n:\n${+inList + 1}. [${user.level}] ${user.name} ${YouSign(
      user.id
    )}`;
  }

  return text;
}

function YouSign(id) {
  switch (id) {
    case "85193591":
      return "üçÜ";

    case "764345345":
      return "‚ôã";

    case "768478516":
      return "üíÄ";

    case "1095075810":
      return "üóø";

    default:
      return "‚úÖ";
  }
}

module.exports = { Text };
